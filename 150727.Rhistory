install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
q()
install.packages(Rcmdr)
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
q()
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
install.packages("rgl")
library(Rcmdr)
install.packages("rgl")
install.packages("rgl")
library(Rcmdr)
install.packages("RCurl")
library(ggbio)
library(ShortRead)
q()
install.packages(/home/participant/Desktop/spp_1.11.tar.gz, repos = NULL, type="source")
install.packages("/home/participant/Desktop/spp_1.11.tar.gz", repos = NULL, type="source")
library(spp)
q()
update.packages('testthat')
install.packages('testthat')
install.packages('roxygen')
install.packages('Rcpp')
install.packages('roxygen2')
install.packages('devtools')
install.packages('knitr')
install.packages('sequences')
quit()
plot(cars)
source("http://bioconductor.org/biocLite.R")
biocLite(c("DESeq2","goseq","bsseq","BiSeq"))
update.packages(gplots)
install.packages(gplots)
install.packages("gplots")
quit()
require(rtracklayer)
?liftover
?liftOver
chain = import.chain("~/Desktop/mm9ToMm10.over.chain.gz")
chain = import.chain("~/Desktop/mm9ToMm10.over.chain")
h3k4me3.bw = file.path("~/Desktop/", "H3K4me3.bw")
h3k4me3.bw = import(H3K4me3.bw)
H3K4me3.bw = import(h3K4me3.bw)
H3K4me3.bw = import(h3k4me3.bw)
H3K4me3.bw
H3K4me3.mm10 = liftOver(H3K4me3.bw, chain)
H3K4me3.mm10
H3K4me3.mm10 = GRanges(H3K4me3.mm10)
H3K4me3.mm10 = as.GRanges(H3K4me3.mm10)
H3K4me3.mm10 = unlist(H3K4me3.mm10)
H3K4me3.mm10
h3k4me3.mm10.bw = file.path("~/Desktop/", "H3K4me3_mm10.bw")
exportH3K4me3.mm10, H3K4me3.mm10.bw, format = 'bw')
export(H3K4me3.mm10, H3K4me3.mm10.bw, format = 'bw')
export(H3K4me3.mm10, h3k4me3.mm10.bw, format = 'bw')
export(object = H3K4me3.mm10, con = h3k4me3.mm10.bw, format = 'bw')
seqlengths(H3K4me3.mm10)
seqlengths(H3K4me3.mm10) = c(195471971)
seqlengths(H3K4me3.mm10)
export(object = H3K4me3.mm10, con = h3k4me3.mm10.bw, format = 'bw')
install.packages(c("abind", "car", "devtools", "e1071", "effects", "httr", "jsonlite", "knitr", "manipulate", "mime", "multcomp", "Rcmdr", "Rcpp", "relimp", "rgl", "roxygen2", "rstudioapi", "sequences", "tcltk2", "testthat", "TH.data"))
q()
library('ggplot2')
library('reshape')
library('gsalib')
library('gsalib')
q()
?ls
?ls
?plot
?mean
?plots
??plot
help.search('slider')
??plot
??plot
??plot
??plots
q()
x<1:10
x<-1:10
y<-2*x
plt(x,y)
plot(x,y)
x <- runif(100)
hist(x)
dd <- data.frame(A=rnorm(100, mean = 2),
B = rnorm(100, mean=5))
boxplot(dd)
runif(100)
man(runif)
plot(x,y,xlab="My X label",ylab="My Y label"
,main="My Title",col="steelblue",pch=16,xlim=c(0,20))
points(x,x,col="red",pch=17)
grid()
abline(0,2,lty=2)
abline(0,1,lty=2)
text(12,10, label="y = x")
text(12,20, label="y = 2x")
values <- rnorm(10)
?runif
values <0
values >0
values
data <- data.frame(Counts = values, Name = rep(c("A","B")))
datga
data
data[values>0,]
data[data$Name == "A"]
data[data$Name == "A",]
data[data$Name != "A",]
data[data$Name == "A" & values > 0,]
data[data$Name == "A" | values > 0,]
data$Name == "A" | values > 0
.libPaths
.libPaths()
.Library
for (i in 1:3){hist(,i)}
for (i in 1:3){hist(data,i)}
data
for (i in 1:3){hist(data[,i])}
xx<-c(runif(10))
xx
for (i in 1:3){hist(xx,i])}
for (i in 1:3){hist(xx,i)}
for (i in 1:3){hist(xx[,i])}
pwd
getpwd
getwd
getwd()
library(Biobase)
data(sample.ExpressionSet)
sample.ExpressionSet
eval <- exprs(sample.ExpressionSet)
dim (eval)
evals <- exprs(sample.ExpressionSet)
dim (evals)
evals [1:4,1:3]
getwd
getwd()
savehistory("~/db/150727.Rhistory")
